{
  "version": 3,
  "sources": ["../src/lib/coercion.ts", "../src/lib/misc.ts", "../src/lib/activation.ts", "../src/lib/log.ts", "../src/lib/sendTheatreMessage.ts", "../src/lib/staging.ts", "../src/module.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/**\n * Retrieves an {@link Actor}\n * @param {unknown} arg A string id or name, or an {@link Actor}\n * @returns {Actor | undefined} {@link Actor} or undefined.\n */\nexport function coerceActor(arg: unknown): Actor | undefined {\n  if (arg instanceof Actor) return arg;\n  if (typeof arg === \"string\") {\n    let actor = game.actors?.get(arg);\n    if (actor) return actor;\n    actor = game.actors?.getName(arg);\n    if (actor) return actor;\n  }\n}\n\n/**\n * Retrieves a {@link Playlist}\n * @param {unkown} arg A string id or name, or a {@link Playlist}\n * @returns {Playlist | undefined} {@link Playlist} or undefined\n */\nexport function coercePlaylist(arg: unknown): Playlist | undefined {\n  if (arg instanceof Playlist) return arg;\n  if (typeof arg === \"string\") {\n    let playlist = game.playlists?.get(arg);\n    if (playlist) return playlist;\n    playlist = game.playlists?.getName(arg);\n    if (playlist) return playlist;\n  }\n}\n\n/**\n * Retireves a {@link PlaylistSound} from a given {@link Playlist} by name, id, or {@link PlaylistSound}\n * @param {unknown} arg \n * @param {unknown} playlist\n */\nexport function coerceSound(arg: unknown, playlist: unknown): PlaylistSound | undefined {\n  if (arg instanceof PlaylistSound) return arg;\n\n  const actualPlaylist = coercePlaylist(playlist);\n  if (actualPlaylist && typeof arg === \"string\") {\n    let sound = actualPlaylist.sounds.get(arg);\n    if (sound instanceof PlaylistSound) return sound;\n    sound = actualPlaylist.sounds.getName(arg);\n    if (sound instanceof PlaylistSound) return sound;\n  }\n}\n\n/**\n * Retrieves an id for an {@link Actor}, given the id, name, or {@link Actor}\n * @param {unknown} arg \n */\nexport function coerceActorId(arg: unknown): string | undefined | null {\n  const actor = coerceActor(arg);\n  if (actor instanceof Actor) return actor.id;\n}\n\n/**\n * Retrieves an id for a given {@link Playlist}\n * @param {unknown} arg \n * @returns \n */\nexport function coercePlaylistId(arg: unknown): string | undefined | null {\n  const playlist = coercePlaylist(arg);\n  if (playlist instanceof Playlist) return playlist.id;\n}\n\n/**\n * Returns a {@link PlaylistSound} for a given id/name/{@link PlaylistSound} for a given {@link Playlist}\n * @param {unknown} arg \n * @param {unknown} playlist \n * @returns \n */\nexport function coerceSoundId(arg: unknown, playlist: unknown): string | undefined | null {\n  const sound = coerceSound(arg, playlist);\n  if (sound instanceof PlaylistSound) return sound.id;\n}", "/**\n * Waits a specified amount of time, then resolves.\n * @param {number} ms Time, in milliseconds, to wait.\n * @returns \n */\nexport async function wait(ms: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  })\n}", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { coerceActor } from \"./coercion\";\nimport { wait } from \"./misc\";\n\n/**\n * Handles staging and activating the insert for an {@link Actor}\n * @param {string} id ID of the {@link Actor}\n */\nexport function activateActor(id: string): Promise<void>\n/**\n * Handles staging and activating the insert for an {@link Actor}\n * @param {string} name Name of the {@link Actor}\n */\nexport function activateActor(name: string): Promise<void>\n/**\n * Handles staging and activating the insert for an {@link Actor}\n * @param {Actor} actor {@link Actor} to activate.\n */\nexport function activateActor(actor: Actor): Promise<void>\nexport function activateActor(arg: unknown): Promise<void> {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTSMACROS.ERRORS.INVALIDACTOR\"));\n\n  // Stage if necessary\n  if (!theatre.getNavItemById(`theatre-${actor.id}`))\n    Theatre.addToNavBar(actor);\n\n  theatre.handleNavItemMouseUp({\n    currentTarget: theatre.getNavItemById(`theatre-${actor.id}`),\n    button: 2\n  });\n\n  return wait(1000);\n}\n\n\n\n/**\n * Handles deactivating and possibly unstaging an (@link Actor).\n * @param {string} id ID of the {@link Actor} to deactivate\n * @param {boolean} [unstage=false] Whether or not to remove the {@link Actor} from the Theatre Inserts stage\n */\nexport function deactivateActor(id: string, unstage?: boolean): Promise<void>\n/**\n * Handles deactivating and possibly unstaging an (@link Actor).\n * @param {string} name Name of the {@link Actor} to deactivate\n * @param {boolean} [unstage=false] Whether or not to remove the {@link Actor} from the Theatre Inserts stage\n */\nexport function deactivateActor(name: string, unstage?: boolean): Promise<void>\n/**\n * Handles deactivating and possibly unstaging an (@link Actor).\n * @param {Actor} actor The {@link Actor} object to deactivate.\n * @param {boolean} [unstage=false] Whether or not to remove the {@link Actor} from the Theatre Inserts stage\n */\nexport function deactivateActor(actor: Actor, unstage?: boolean): Promise<void>\nexport function deactivateActor(arg: unknown, unstage?: boolean): Promise<void> {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTSMACROS.ERRORS.INVALIDACTOR\"));\n\n  // Deactivate\n  theatre.removeInsertById(`theatre-${actor.id}`, false);\n  // Unstage?\n  if (unstage) {\n    theatre.handleNavItemMouseUp({\n      currentTarget: theatre.getNavItemById(`theatre-${actor.id}`),\n      button: 2,\n      ctrlKey: true\n    });\n  }\n  return wait(1000);\n}\n\n\n/**\n * Checks whether or not a given {@link Actor}'s insert is active.\n * @param {string} id ID of the {@link Actor}\n */\nexport function isActorActive(id: string): boolean\n/**\n * Checks whether or not a given {@link Actor}'s insert is active.\n * @param {name} name Name of the {@link Actor}\n */\nexport function isActorActive(name: string): boolean\n/**\n * Checks whether or not a given {@link Actor}'s insert is active.\n * @param {Actor} actor {@link Actor} object\n */\nexport function isActorActive(actor: Actor): boolean\nexport function isActorActive(arg: unknown): boolean {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTSMACROS.ERRORS.INVALIDACTOR\"));\n\n  const navItem: HTMLElement = theatre.getNavItemById(`theatre-${actor.id}`);\n  // They are not staged\n  if (!navItem) return false;\n  return navItem.classList.contains(\"theatre-control-nav-bar-item-speakingas\");\n}", "\n/** Icon to prepend to log messages, to make it easier to locate them in the console. */\nconst LOG_ICON: string = \"\uD83C\uDFAD\";\nconst LOG_PREFIX: string = `${LOG_ICON} ${__MODULE_TITLE__}`;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype LogFunction = (...data: any[]) => void;\n\nexport const log = wrappedConsoleFunc(console.log);\nexport const warn = wrappedConsoleFunc(console.warn);\nexport const error = wrappedConsoleFunc(console.error);\nexport const info = wrappedConsoleFunc(console.info);\n\nfunction wrappedConsoleFunc(original: LogFunction): LogFunction {\n  return function (this: unknown, ...args: unknown[]): void {\n    const shouldLog: boolean = __DEV__ ? true : typeof args[0] === \"boolean\" ? args[0] : false;\n    const actualArgs = args;\n\n\n    if (shouldLog)\n      original(LOG_PREFIX, \"|\", ...actualArgs);\n\n    // console.log(LOG_PREFIX, \"|\", ...actualArgs);\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { activateActor } from \"./activation\";\nimport { coerceActor } from \"./coercion\";\nimport { wait } from \"./misc\";\n\nexport function sendTheatreMessage(actor: Actor, message: string, emote?: string, ttl?: number, deactivate?: boolean, unstage?: boolean): Promise<void>\nexport function sendTheatreMessage(id: string, message: string, emote?: string, ttl?: number, deactivate?: boolean, unstage?: boolean): Promise<void>\nexport function sendTheatreMessage(arg: Actor | string, message: string, emote?: string, ttl?: number, deactivate?: boolean, unstage?: boolean): Promise<void> {\n  return doSendTheatreMessage(arg, message, emote, ttl, deactivate, unstage);\n}\n\n\nasync function doSendTheatreMessage(arg: Actor | string, message: string, emote?: string, ttl?: number, deactivate?: boolean, unstage?: boolean): Promise<void> {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTMACROS.ERRORS.INVALIDACTOR\"));\n\n  await activateActor(actor);\n\n  const navItem = theatre.getNavItemById(`theatre-${actor.id}`);\n\n  // Activate insert in case it isn't for some reason\n  if (!navItem.classList.contains(\"theatre-control-nav-bar-item-speakingas\")) {\n    theatre.handleNavItemMouseUp({\n      currentTarget: navItem,\n      button: 0\n    });\n  }\n\n  const chatBox: JQuery<HTMLTextAreaElement> = $(\"#chat-message\");\n  const previousValue: string = chatBox.val() ?? \"\";\n  const prevFocus: boolean = chatBox.is(\":selected\");\n\n\n  theatre.setUserTyping(game.user?.id, theatre.speakingAs);\n\n  if (emote) {\n    theatre.isDelayEmote = true;\n    theatre.setUserEmote(\n      game.user?.id,\n      `theatre-${actor.id}`,\n      \"emote\",\n      emote,\n      false\n    );\n\n    if (ttl) {\n      setTimeout(() => {\n        theatre.isDelayEmote = false;\n        theatre.setUserEmote(\n          game.user?.id,\n          `theatre-${actor.id}`,\n          \"emote\",\n          \"\",\n          false\n        );\n      }, ttl);\n    }\n  }\n\n  chatBox.trigger(\"focus\");\n  chatBox.val(message);\n  chatBox.trigger(\n    jQuery.Event(\"keydown\", {\n      which: 13,\n      keyCode: 13,\n      originalEvent: new KeyboardEvent(\"keydown\", {\n        code: \"Enter\",\n        key: \"Enter\",\n        charCode: 13,\n        keyCode: 13,\n        view: window,\n        bubbles: true\n      })\n    })\n  );\n\n  chatBox.trigger(\n    jQuery.Event(\"keyup\", {\n      which: 13,\n      keyCode: 13,\n      originalEvent: new KeyboardEvent(\"keyup\", {\n        code: \"Enter\",\n        key: \"Enter\",\n        charCode: 13,\n        keyCode: 13,\n        view: window,\n        bubbles: true\n      })\n    })\n  );\n\n\n  // Return to previous state\n  if (!prevFocus) chatBox.trigger(\"blur\");\n  chatBox.val(previousValue);\n\n\n  await wait(ttl ?? 0)\n  if (deactivate) theatre.removeInsertById(`theatre-${actor.id}`, false);\n  if (unstage) {\n    theatre.handleNavItemMouseUp({\n      currentTarget: navItem,\n      button: 2,\n      ctrlKey: true\n    })\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { coerceActor } from \"./coercion\";\nimport { log } from \"./log\";\n\n\n/**\n * Checks whether or not an {@link Actor} is added to the Theatre Inserts stage.\n * @param {string} id ID fo the {@link Actor} to check\n */\nexport function isActorStaged(id: string): boolean\n/**\n * Checks whether or not an {@link Actor} is added to the Theatre Inserts stage.\n * @param {string} name Name of the {@link Actor} to check\n */\nexport function isActorStaged(name: string): boolean\n/**\n * Checks whether or not an {@link Actor} is added to the Theatre Inserts stage.\n * @param {Actor} actor {@link Actor} object to check\n */\nexport function isActorStaged(actor: Actor): boolean\nexport function isActorStaged(arg: unknown): boolean {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTSMACROS.ERRORS.INVALIDACTOR\"));\n  return !!theatre.getNavItemById(`theatre-${actor.id}`);\n}\n\n/**\n * Stages an {@link Actor} if necessary.\n * @param {string} id ID of the {@link Actor}\n */\nexport function stageActor(id: string): void\n/**\n * Stages an {@link Actor} if necessary.\n * @param {string} name Name of the {@link Actor}\n */\nexport function stageActor(name: string): void\n/**\n * Stages an {@link Actor} if necessary.\n * @param {Actor} actor {@link Actor} object\n */\nexport function stageActor(actor: Actor): void\nexport function stageActor(arg: unknown): void {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTSMACROS.ERRORS.INVALIDACTOR\"));\n  log(\"Staging:\", actor, isActorStaged(actor));\n\n  if (!isActorStaged(actor))\n    Theatre.addToNavBar(actor);\n}\n\n/**\n * Handles unstaging an {@link Actor}\n * @param {string} id ID of the {@link Actor}\n */\nexport function unstageActor(id: string): void\n/**\n * Handles unstaging an {@link Actor}\n * @param {string} name Name of the {@link Actor}\n */\nexport function unstageActor(name: string): void\n/**\n * Handles unstaging an {@link Actor}\n * @param {Actor} actor {@link Actor} object\n */\nexport function unstageActor(actor: Actor): void\nexport function unstageActor(arg: unknown): void {\n  const actor = coerceActor(arg);\n  if (!(actor instanceof Actor)) throw new Error(game.i18n?.localize(\"THEATREINSERTSMACROS.ERRORS.INVALIDACTOR\"));\n\n  if (isActorStaged(actor)) {\n    theatre.handleNavItemMouseUp({\n      currentTarget: theatre.getNavItemById(`theatre-${actor.id}`),\n      button: 2,\n      ctrlKey: true\n    });\n  }\n}", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport { activateActor, deactivateActor, isActorActive } from \"./lib/activation\";\nimport { log } from \"./lib/log\";\nimport { wait } from \"./lib/misc\";\nimport { sendTheatreMessage } from \"./lib/sendTheatreMessage\";\nimport { isActorStaged, stageActor, unstageActor } from \"./lib/staging\";\n\n\nHooks.on(\"ready\", () => {\n  if (game instanceof Game && !game.modules.get(\"theatre\")?.active) {\n    ui.notifications?.error(game.i18n?.format(\"THEATREINSERTSMACROS.ERRORS.THEATREINSERTSNOTFOUND\", { MODULENAME: __MODULE_TITLE__ }));\n  } else {\n\n    const api: object = {\n      wait,\n      activateActor,\n      deactivateActor,\n      isActorActive,\n      isActorStaged,\n      stageActor,\n      unstageActor,\n      sendTheatreMessage\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (<any>window).TheatreMacros = api;\n\n\n    log(`Ready!`);\n  }\n\n});"],
  "mappings": "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",
  "names": []
}
